# 中间件

中间件是框架的扩展机制，主要用于抽象HTTP请求过程，在单一请求响应过程中加入中间件，可以更好地应对复杂的业务逻辑。

### ctx 上常用对象
- request req
- response res
- request response 是Koa内置对象
- req 和 res 是在http.createServer 回掉函数里注入的，即未经加工的原生内置对象

```js
 callback(){
     const fn = compose(this.middleware);
     if(!this.listeners('error').length) this.on('error',this.onerror)

     const handleRequest = (req,res)=>{
         res.statusCOde = 404;
         const ctx = this.createContext(req,res)
         const onerror = err=>ctx.onerror(err)
         const handleResponse = ()=> repond(ctx)
         onFinished(res,onerror)
         return fn(ctx).then(handleResponse).catch(onerror)
     }

     return handleRequest;
 }


createContext(req,res){
    const context = Object.create(this.context)
    const request  = context.request = Object.create(this.request)
    const response = context.response = Object.create(this.response)
    context.app = request.app = response.app = this
    context.req = request.req = response.req = req
    context.res = request.res = response.res  = res
    request.ctx = response.ctx = context
    request.response = response
    response.request = request
    context.originalUrl = request.originalUrl = req.url
    context.cookies = new Cookies(req,res,{
        keys:this.keys,
        secure:request.secure
    })
    request.ip = request.ips[0]||req.socket.remoteAddress||''
    context.accept = request.accept = accepts(req)
    const.state = {}
    return context

}

```

## 与浏览器端交互

1. ctx.body
2. ctx.redirect
```js
 // 向后重定向
 ctx.redirect('back')
 ctx.redirect('back','/index.html')
```
3. ctx.render
模版渲染使用的方法

```js
router.get('/',async(ctx,next)=>{
    await ctx.render('index',{
        title:'Hello koa 2'
    })
})
```

## 洋葱模型
1. compose

```js
 compose(middleware){
     return function(context,next){
         let index = -1
         return dispatch(0)
         function dispatch(i){
             if(i<=index)
             return Promise.reject(new Error('next() called multiple times'))
             index = i
             const fn = middleware[i]||next
             if(!fn) return Promise.resolve()
             try{
                 return Promise.resolve(fn(context,function next(){
                     return dispatch(i+1)
                 }))
             }catch(err){
                 return Promise.reject(err)
             }
         }
     }
 }
```

## 常用中间件

### 3类
- Pre-Request: 通常用来改写请求的原始数据
- Request/Response：大部分中间件都在这里，功能各异
- Post-Response: 进行全局异常处理，改写响应数据等

- koa-compress 是实现gzip压缩的中间件
- koa-conditional-get 和 koa-etag 是提供Etag使用的中间件
- koa-favicon是简单的Favicon中间件
- koa-static 是提供静态HTTP资源托管的中间件

## Koa-router
- route
- trie-router
- joi-router
- koa-router express 风格路由

### koa-router 路由风格
- Express风格路由
- 支持HTTp状态码
- 支持多个路由中间件
- 支持多路由
- 支持嵌套路由
- 支持 async/await 写法

### 路由实现原理

- 定义路由
- 路由的路径会被转译成正则表达式
- 匹配请求，使用中间件进行处理

路由解析是核心，使用的是 path-to-regexp模块

- 普通路由
- 具名路由
  ctx.params

- 正则路由 /^\/commit\/ (\w+) (?:\.\.(\w+))?$/
- 嵌套路由

### 路由也是中间件
- 解藕代码，将代码拆分更细致
- 实现模块化，通过组装中间件完成逻辑
- 实现权限类，日志类的AOP
- 实现与Hook 类似的抽象

### HTTP 动词
RESTful 风格路由
```js
router.get 查
router.pose 创建
router.patch 更新
router.delete 删除
```


## 核心要点
 
 http 模块是Node.js 中应用最广且最具代表性的模块， stream 和 EventEmiter 都是服务器端编程领域的经典技术。
 - HTTP 是 Web 应用开发的基础，我们要对协议及其应用场景有深入理解。
 - EventEmiter 主要负责事件监听和处理，异步处理结合事件驱动可以获得更好的性能和易用性
 - Stream 将请求响应过程抽象成一个流并在内存中传递，便于进行大文件处理，能够提高扩展性。

 ### Stream

 #### 5种流程操作类型
  
  - Readable 可读操作类型，可以产出数据，这些数据可以被传送到其他流种，只需要 pipe 方法
  - Writeable: 可写操作类型，只能流进不能流出
  - Duplex 可读可写操作类型
  - Transform 转换类型，可写入数据，然后读出结果
  - classic 经典接口，不怎么使用了

  - Stream 的精髓是将上一个输出作为下一个输入，

  #### HTTP 代理
  #### EventEmitter

### HTTPS
 HTTPS 是以安全为目标的HTTP 通道，简单讲是 HTTP的安全版本，在网络传输过程中，主要使用 SSL/TLS进行加密

 - SSL 安全套接字 位于可靠的面向连接的网络协议层和应用协议层。 通过互相认证，使用数字签名确保完整性，使用加密确保私密性，以实现客户端和服务端的通信安全。由两部分组成，SSL记录协议和SSL握手协议
 - TLS 安全传输层协议，用于保证两个应用程序之间的保密性和数据完整性。由两部分组成 TLS记录协议和TLS握手协议组成

 HTTPS 涉及3个主体
 - 客户端
 - 服务器端
 - 证书颁发


 ### Koa lib/request.js 中由30个方法
 - headers
 - url
 - originUrl
 - href
 - method
 - path
 - query
 - querystring
 - search
 - host
 - hostname
 - fresh
 - stale
 - idempotent
 - socket
 - charset
 - content length
 - accepts
 - acceptsEncodings
 - acceptsCharsets
 - acceptsLanguages
 - type
 - protocol
 - secure
 - ips
 - subdomains
 - is
 - get 
 - inspect
 - toJSON


 ### http 头部
 - charset 获取字符集
 - length 获取Content-Length长度
 - accepts 表示客户端可接受的媒体类型
 - acceptsEncodings 表示支持的压缩算法
 - acceptsCharsets 表示支持的字符集
 - acceptsLanguages 表示支持的语言
 - is 用于判断请求重的Content_Type值与预期是否一致
 - type 用于获取或者设置Content-type


### cookie 的重要属性
- name=value 在Cooie中可以用这种方法对内容赋值
- max=age 最大失效时间 ms
- signed Cookie 值签名
- path 影响到的路径，路径不匹配就不发送
- domain 影响到的域名
- secure true 时 HTTP 中无效，在HTTPS 中才有效 
- httpOnly 微软做的扩展，防止XSS攻击
- Expires 缓存失效时间

### 获取不同参数
- params 具名参数
- query 查询字符串
- body 请求体 POST 类请求才有值

- 请求体 
 - JSON
 - Raw
 - 文本
 - URL-encoded 格式

